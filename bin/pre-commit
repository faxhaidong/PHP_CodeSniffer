#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
# source /usr/local/opt/php@8.0/bin/php
PHPCS_BIN=/Users/chenhaidong/work/server/php_codesniffer/bin/phpcs
PHPCBF_BIN=/Users/chenhaidong/work/server/php_codesniffer/bin/phpcbf
PHPCS_RULESET=/Users/chenhaidong/work/server/php_codesniffer/src/Standards/PSR12/rulesetCustom.xml
PHPCS_IGNORE=
PHPCS_IGNORE_WARNINGS=1

phplretval=0
for i in $(git diff-index --name-only --cached HEAD | grep -e '\.php$'); do
    if [ -f $i ]; then
        output=$(php -l $i)
        if [ $? -gt 0 ]; then
            phplretval=1
        fi
        echo $output
    fi
done
if [ $phplretval -gt 0 ]; then
    exit $phplretval
fi


if [ ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    exit 1
fi

if git rev-parse --verify HEAD
then
    against=HEAD
else
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi


FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

if [ "$PHPCS_RULESET" != "" ]; then
    RULESET="--standard=$PHPCS_RULESET"
else
    RULESET=""
fi

if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

if [ "$PHPCS_SNIFFS" != "" ]; then
    SNIFFS="--sniffs=$PHPCS_SNIFFS"
else
    SNIFFS=""
fi

if [ "$PHPCS_ENCODING" != "" ]; then
    ENCODING="--encoding=$PHPCS_ENCODING"
else
    ENCODING=""
fi

if [ "$PHPCS_IGNORE_WARNINGS" == "1" ]; then
    IGNORE_WARNINGS="-n"
else
    IGNORE_WARNINGS=""
fi

STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

  STAGED_FILES="$STAGED_FILES $FILE"
done
$PHPCBF_BIN $STAGED_FILES
git add $STAGED_FILES
OUTPUT=$($PHPCS_BIN -s $RULESET $IGNORE_WARNINGS $ENCODING $IGNORE $SNIFFS $STAGED_FILES)
RETVAL=$?

if [ $RETVAL -ne 0 ]; then
    echo "$OUTPUT"
fi

exit $RETVAL
